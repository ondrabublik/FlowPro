apply plugin: 'com.github.johnrengelman.shadow'

def mainClassName = 'flowpro.core.FlowProMain'

if (!hasProperty('mainClass')) {
    ext.mainClass = mainClassName
}

dependencies {
    implementation fileTree(dir: 'lib', include: ['*.jar'])
    
    //    implementation 'org.slf4j:slf4j-api:1.7.21'
    //    implementation 'org.slf4j:slf4j-log4j12:1.7.21'
    //    implementation 'log4j:log4j:1.2.17'
    
    implementation 'org.apache.commons:commons-lang3:3.0'
    implementation 'commons-cli:commons-cli:1.4'    
    
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
    }
}

println '-------------------------------------------------'
def modules2manifest = ""
new File("${projectDir}/modules").eachFileRecurse {file->
    if (file.isFile() && file.name.endsWith("jar")) {
        def File projectDir = new File("${projectDir}")
        def relPath = projectDir.toPath().relativize(file.getParentFile().toPath())
        modules2manifest += relPath.toString().toLowerCase() + "/" + file.name + " "
    }
}

jar {
    manifest {
        attributes(
            'Main-Class': mainClassName,
            'Class-Path': modules2manifest
        )
    }
}

task copyJar {
    doLast {
        def src = shadowJar.outputs.files[0]
        def dst = new File("${projectDir}/FlowPro.jar")
        if(dst.exists()){
            dst.delete()
        }
        dst << src.bytes
    }
}

task zip2Fetch(type: Zip) {
    from "${projectDir}"
    include 'modules/**', 'lib/*.dll', 'FlowPro.jar'
    archiveName 'FlowPro.zip'
    destinationDir(file("${projectDir}"))
}

jar.finalizedBy shadowJar
shadowJar.finalizedBy copyJar
copyJar.finalizedBy zip2Fetch


// xlint for more info
//tasks.withType(JavaCompile) {
//    options.compilerArgs << '-Xlint:unchecked'
//    options.deprecation = true
//}
